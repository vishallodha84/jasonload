AWSTemplateFormatVersion: 2010-09-09
Description: The CloudFormation template for the Fargate ECS Cluster.

Parameters:
  Stage:
    Type: String
  ContainerPort:
    Type: Number
  ImageURI:
    Type: String
  Service:
    Type: String
  VPC:
    Type: String
  PrivateSubnet:
    Type: String
  PublicSubnet:
    Type: String
  Cluster:
    Type: String

Resources:
  # Create Access Role for ECS-Tasks
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        !Join ["-", [!Ref Stage, !Ref Service, "ExecutionRole"]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, !Ref Service, TaskDefinition]]

  # Create a TaskDefinition with container details
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ["-", [!Ref Stage, !Ref Service]]
      Memory: 1024
      Cpu: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - "FARGATE"
      TaskRoleArn: !Ref ExecutionRole
      ExecutionRoleArn: !Ref ExecutionRole
      ContainerDefinitions:
        - Name: !Ref Service
          Image: !Ref ImageURI
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              HostPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
          Environment:
            - Name: SPRING_CLOUD_CONFIG_URL
              Value: http://sit-config-server-alb-1015195712.ap-southeast-1.elb.amazonaws.com
            - Name: SPRING_PROFILES_ACTIVE
              Value: sit

  # Creat a security group for load balancer and open port 80 in bound from internet
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ["-", [!Ref Stage, !Ref Service, "lb-sg"]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Creat a security group for Containers and open in bound Container port from Load balancer security group to the Container
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ["-", [!Ref Stage, !Ref Service, "container-sg"]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  # Create a LoadBalancer and attach the Security group and Subnets
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Join ["-", [!Ref Stage, !Ref Service, "alb"]]
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref PrivateSubnet
        - !Ref PublicSubnet
      Type: application

  # Create a TargetGroup for HTTP port 80
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ["-", [!Ref Stage, !Ref Service, "tg"]]
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC

  # Create a LoadBalancerListener and attach the TargetGroup and LoadBalancer
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # Create an ECS Service and add created Cluster, TaskDefintion, Subnets, TargetGroup and SecurityGroup
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      ServiceName: !Ref Service
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 100
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PrivateSubnet
          #  - !Ref PublicSubnet
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: !Ref Service
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup


  SnsAlarmTopic1:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        - Endpoint: "mangesh@transformhub.com"
          Protocol: "email"
      TopicName: !Join ["-", [!Ref Stage, !Ref Service, 'cpu']]
  CloudWatchCPUAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: !Join ["-", [!Ref Service, 'cpu-utilization']]
      AlarmDescription: "Alarm if cpu utilization greater than 80% of reserved cpu"
      Namespace: "AWS/ECS"
      MetricName: CPUUtilization
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
        - Name: ServiceName
          Value: !Ref Service
      Statistic: Maximum
      Period: "60"
      EvaluationPeriods: "3"
      Threshold: "80"
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref SnsAlarmTopic1


  SnsAlarmTopic2:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        - Endpoint: "mangesh@transformhub.com"
          Protocol: "email"
      TopicName: !Join ["-", [!Ref Stage, !Ref Service, memory]]
  CloudWatchMemoryAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: !Join ["-", [!Ref Service, 'memory-utilization']]
      AlarmDescription: "Alarm if Memory utilization greater than 80% of reserved cpu"
      Namespace: "AWS/ECS"
      MetricName: MemoryUtilization
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
        - Name: ServiceName
          Value: !Ref Service
      Statistic: Maximum
      Period: "60"
      EvaluationPeriods: "3"
      Threshold: "80"
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref SnsAlarmTopic2